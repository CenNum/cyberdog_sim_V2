"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class motor_ctrl_lcmt(object):
    __slots__ = ["q_des", "qd_des", "kp_des", "kd_des", "tau_des"]

    __typenames__ = ["float", "float", "float", "float", "float"]

    __dimensions__ = [[12], [12], [12], [12], [12]]

    def __init__(self):
        self.q_des = [ 0.0 for dim0 in range(12) ]
        self.qd_des = [ 0.0 for dim0 in range(12) ]
        self.kp_des = [ 0.0 for dim0 in range(12) ]
        self.kd_des = [ 0.0 for dim0 in range(12) ]
        self.tau_des = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(motor_ctrl_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>12f', *self.q_des[:12]))
        buf.write(struct.pack('>12f', *self.qd_des[:12]))
        buf.write(struct.pack('>12f', *self.kp_des[:12]))
        buf.write(struct.pack('>12f', *self.kd_des[:12]))
        buf.write(struct.pack('>12f', *self.tau_des[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != motor_ctrl_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return motor_ctrl_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = motor_ctrl_lcmt()
        self.q_des = struct.unpack('>12f', buf.read(48))
        self.qd_des = struct.unpack('>12f', buf.read(48))
        self.kp_des = struct.unpack('>12f', buf.read(48))
        self.kd_des = struct.unpack('>12f', buf.read(48))
        self.tau_des = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if motor_ctrl_lcmt in parents: return 0
        tmphash = (0x3ddbe622bc22d656) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if motor_ctrl_lcmt._packed_fingerprint is None:
            motor_ctrl_lcmt._packed_fingerprint = struct.pack(">Q", motor_ctrl_lcmt._get_hash_recursive([]))
        return motor_ctrl_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", motor_ctrl_lcmt._get_packed_fingerprint())[0]

