/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class trajectory_command_lcmt implements lcm.lcm.LCMEncodable
{
    public String motionType;
    public float pose_body_cmd[];
    public float pose_foot_cmd[];
    public float pose_ctrl_point[];
    public float pose_foot_support[];
    public float stateEstate_foot_support[];
    public float locomotion_vel[];
    public int locomotion_omni;
    public int locomotion_gait;
    public float jump_x_acc[];
    public float jump_w_acc[];
    public float jump_contact[];
    public float trans_height;
    public int duration;
 
    public trajectory_command_lcmt()
    {
        pose_body_cmd = new float[6];
        pose_foot_cmd = new float[3];
        pose_ctrl_point = new float[3];
        pose_foot_support = new float[4];
        stateEstate_foot_support = new float[4];
        locomotion_vel = new float[3];
        jump_x_acc = new float[3];
        jump_w_acc = new float[3];
        jump_contact = new float[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0c7f849afda4d848L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.trajectory_command_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.trajectory_command_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[this.motionType.length()]; this.motionType.getChars(0, this.motionType.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.pose_body_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pose_foot_cmd[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pose_ctrl_point[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.pose_foot_support[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.stateEstate_foot_support[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.locomotion_vel[a]); 
        }
 
        outs.writeInt(this.locomotion_omni); 
 
        outs.writeInt(this.locomotion_gait); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.jump_x_acc[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.jump_w_acc[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.jump_contact[a]); 
        }
 
        outs.writeFloat(this.trans_height); 
 
        outs.writeInt(this.duration); 
 
    }
 
    public trajectory_command_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public trajectory_command_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.trajectory_command_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.trajectory_command_lcmt o = new lcmtypes.trajectory_command_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.motionType = new String(__strbuf);
 
        this.pose_body_cmd = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pose_body_cmd[a] = ins.readFloat();
        }
 
        this.pose_foot_cmd = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pose_foot_cmd[a] = ins.readFloat();
        }
 
        this.pose_ctrl_point = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pose_ctrl_point[a] = ins.readFloat();
        }
 
        this.pose_foot_support = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.pose_foot_support[a] = ins.readFloat();
        }
 
        this.stateEstate_foot_support = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.stateEstate_foot_support[a] = ins.readFloat();
        }
 
        this.locomotion_vel = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.locomotion_vel[a] = ins.readFloat();
        }
 
        this.locomotion_omni = ins.readInt();
 
        this.locomotion_gait = ins.readInt();
 
        this.jump_x_acc = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.jump_x_acc[a] = ins.readFloat();
        }
 
        this.jump_w_acc = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.jump_w_acc[a] = ins.readFloat();
        }
 
        this.jump_contact = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.jump_contact[a] = ins.readFloat();
        }
 
        this.trans_height = ins.readFloat();
 
        this.duration = ins.readInt();
 
    }
 
    public lcmtypes.trajectory_command_lcmt copy()
    {
        lcmtypes.trajectory_command_lcmt outobj = new lcmtypes.trajectory_command_lcmt();
        outobj.motionType = this.motionType;
 
        outobj.pose_body_cmd = new float[(int) 6];
        System.arraycopy(this.pose_body_cmd, 0, outobj.pose_body_cmd, 0, 6); 
        outobj.pose_foot_cmd = new float[(int) 3];
        System.arraycopy(this.pose_foot_cmd, 0, outobj.pose_foot_cmd, 0, 3); 
        outobj.pose_ctrl_point = new float[(int) 3];
        System.arraycopy(this.pose_ctrl_point, 0, outobj.pose_ctrl_point, 0, 3); 
        outobj.pose_foot_support = new float[(int) 4];
        System.arraycopy(this.pose_foot_support, 0, outobj.pose_foot_support, 0, 4); 
        outobj.stateEstate_foot_support = new float[(int) 4];
        System.arraycopy(this.stateEstate_foot_support, 0, outobj.stateEstate_foot_support, 0, 4); 
        outobj.locomotion_vel = new float[(int) 3];
        System.arraycopy(this.locomotion_vel, 0, outobj.locomotion_vel, 0, 3); 
        outobj.locomotion_omni = this.locomotion_omni;
 
        outobj.locomotion_gait = this.locomotion_gait;
 
        outobj.jump_x_acc = new float[(int) 3];
        System.arraycopy(this.jump_x_acc, 0, outobj.jump_x_acc, 0, 3); 
        outobj.jump_w_acc = new float[(int) 3];
        System.arraycopy(this.jump_w_acc, 0, outobj.jump_w_acc, 0, 3); 
        outobj.jump_contact = new float[(int) 4];
        System.arraycopy(this.jump_contact, 0, outobj.jump_contact, 0, 4); 
        outobj.trans_height = this.trans_height;
 
        outobj.duration = this.duration;
 
        return outobj;
    }
 
}

