/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class robot_control_cmd_lcmt implements lcm.lcm.LCMEncodable
{
    public byte mode;
    public byte gait_id;
    public byte contact;
    public byte life_count;
    public float vel_des[];
    public float rpy_des[];
    public float pos_des[];
    public float acc_des[];
    public float ctrl_point[];
    public float foot_pose[];
    public float step_height[];
    public int value;
    public int duration;
 
    public robot_control_cmd_lcmt()
    {
        vel_des = new float[3];
        rpy_des = new float[3];
        pos_des = new float[3];
        acc_des = new float[6];
        ctrl_point = new float[3];
        foot_pose = new float[6];
        step_height = new float[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x476b61e296af96f5L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.robot_control_cmd_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.robot_control_cmd_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.mode); 
 
        outs.writeByte(this.gait_id); 
 
        outs.writeByte(this.contact); 
 
        outs.writeByte(this.life_count); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.vel_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpy_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.pos_des[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.acc_des[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.ctrl_point[a]); 
        }
 
        for (int a = 0; a < 6; a++) {
            outs.writeFloat(this.foot_pose[a]); 
        }
 
        for (int a = 0; a < 2; a++) {
            outs.writeFloat(this.step_height[a]); 
        }
 
        outs.writeInt(this.value); 
 
        outs.writeInt(this.duration); 
 
    }
 
    public robot_control_cmd_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public robot_control_cmd_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.robot_control_cmd_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.robot_control_cmd_lcmt o = new lcmtypes.robot_control_cmd_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.mode = ins.readByte();
 
        this.gait_id = ins.readByte();
 
        this.contact = ins.readByte();
 
        this.life_count = ins.readByte();
 
        this.vel_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.vel_des[a] = ins.readFloat();
        }
 
        this.rpy_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy_des[a] = ins.readFloat();
        }
 
        this.pos_des = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pos_des[a] = ins.readFloat();
        }
 
        this.acc_des = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.acc_des[a] = ins.readFloat();
        }
 
        this.ctrl_point = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.ctrl_point[a] = ins.readFloat();
        }
 
        this.foot_pose = new float[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.foot_pose[a] = ins.readFloat();
        }
 
        this.step_height = new float[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.step_height[a] = ins.readFloat();
        }
 
        this.value = ins.readInt();
 
        this.duration = ins.readInt();
 
    }
 
    public lcmtypes.robot_control_cmd_lcmt copy()
    {
        lcmtypes.robot_control_cmd_lcmt outobj = new lcmtypes.robot_control_cmd_lcmt();
        outobj.mode = this.mode;
 
        outobj.gait_id = this.gait_id;
 
        outobj.contact = this.contact;
 
        outobj.life_count = this.life_count;
 
        outobj.vel_des = new float[(int) 3];
        System.arraycopy(this.vel_des, 0, outobj.vel_des, 0, 3); 
        outobj.rpy_des = new float[(int) 3];
        System.arraycopy(this.rpy_des, 0, outobj.rpy_des, 0, 3); 
        outobj.pos_des = new float[(int) 3];
        System.arraycopy(this.pos_des, 0, outobj.pos_des, 0, 3); 
        outobj.acc_des = new float[(int) 6];
        System.arraycopy(this.acc_des, 0, outobj.acc_des, 0, 6); 
        outobj.ctrl_point = new float[(int) 3];
        System.arraycopy(this.ctrl_point, 0, outobj.ctrl_point, 0, 3); 
        outobj.foot_pose = new float[(int) 6];
        System.arraycopy(this.foot_pose, 0, outobj.foot_pose, 0, 6); 
        outobj.step_height = new float[(int) 2];
        System.arraycopy(this.step_height, 0, outobj.step_height, 0, 2); 
        outobj.value = this.value;
 
        outobj.duration = this.duration;
 
        return outobj;
    }
 
}

