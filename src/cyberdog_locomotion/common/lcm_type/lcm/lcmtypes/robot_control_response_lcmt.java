/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class robot_control_response_lcmt implements lcm.lcm.LCMEncodable
{
    public byte mode;
    public byte gait_id;
    public byte contact;
    public byte order_process_bar;
    public byte switch_status;
    public byte ori_error;
    public short footpos_error;
    public int motor_error[];
 
    public robot_control_response_lcmt()
    {
        motor_error = new int[12];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x485da98216eda8c7L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.robot_control_response_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.robot_control_response_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.mode); 
 
        outs.writeByte(this.gait_id); 
 
        outs.writeByte(this.contact); 
 
        outs.writeByte(this.order_process_bar); 
 
        outs.writeByte(this.switch_status); 
 
        outs.writeByte(this.ori_error); 
 
        outs.writeShort(this.footpos_error); 
 
        for (int a = 0; a < 12; a++) {
            outs.writeInt(this.motor_error[a]); 
        }
 
    }
 
    public robot_control_response_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public robot_control_response_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.robot_control_response_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.robot_control_response_lcmt o = new lcmtypes.robot_control_response_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.mode = ins.readByte();
 
        this.gait_id = ins.readByte();
 
        this.contact = ins.readByte();
 
        this.order_process_bar = ins.readByte();
 
        this.switch_status = ins.readByte();
 
        this.ori_error = ins.readByte();
 
        this.footpos_error = ins.readShort();
 
        this.motor_error = new int[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.motor_error[a] = ins.readInt();
        }
 
    }
 
    public lcmtypes.robot_control_response_lcmt copy()
    {
        lcmtypes.robot_control_response_lcmt outobj = new lcmtypes.robot_control_response_lcmt();
        outobj.mode = this.mode;
 
        outobj.gait_id = this.gait_id;
 
        outobj.contact = this.contact;
 
        outobj.order_process_bar = this.order_process_bar;
 
        outobj.switch_status = this.switch_status;
 
        outobj.ori_error = this.ori_error;
 
        outobj.footpos_error = this.footpos_error;
 
        outobj.motor_error = new int[(int) 12];
        System.arraycopy(this.motor_error, 0, outobj.motor_error, 0, 12); 
        return outobj;
    }
 
}

