/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class bms_response_lcmt implements lcm.lcm.LCMEncodable
{
    public short batt_volt;
    public short batt_curr;
    public short batt_temp;
    public byte batt_soc;
    public byte status;
    public byte key;
    public byte batt_health;
    public short batt_loop_number;
    public byte powerBoard_status;
    public byte locomotion_bits;
    public byte power_boards_bits;
    public byte other_bits;
 
    public bms_response_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xdbb715bf65fdf256L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.bms_response_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.bms_response_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeShort(this.batt_volt); 
 
        outs.writeShort(this.batt_curr); 
 
        outs.writeShort(this.batt_temp); 
 
        outs.writeByte(this.batt_soc); 
 
        outs.writeByte(this.status); 
 
        outs.writeByte(this.key); 
 
        outs.writeByte(this.batt_health); 
 
        outs.writeShort(this.batt_loop_number); 
 
        outs.writeByte(this.powerBoard_status); 
 
        outs.writeByte(this.locomotion_bits); 
 
        outs.writeByte(this.power_boards_bits); 
 
        outs.writeByte(this.other_bits); 
 
    }
 
    public bms_response_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public bms_response_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.bms_response_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.bms_response_lcmt o = new lcmtypes.bms_response_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.batt_volt = ins.readShort();
 
        this.batt_curr = ins.readShort();
 
        this.batt_temp = ins.readShort();
 
        this.batt_soc = ins.readByte();
 
        this.status = ins.readByte();
 
        this.key = ins.readByte();
 
        this.batt_health = ins.readByte();
 
        this.batt_loop_number = ins.readShort();
 
        this.powerBoard_status = ins.readByte();
 
        this.locomotion_bits = ins.readByte();
 
        this.power_boards_bits = ins.readByte();
 
        this.other_bits = ins.readByte();
 
    }
 
    public lcmtypes.bms_response_lcmt copy()
    {
        lcmtypes.bms_response_lcmt outobj = new lcmtypes.bms_response_lcmt();
        outobj.batt_volt = this.batt_volt;
 
        outobj.batt_curr = this.batt_curr;
 
        outobj.batt_temp = this.batt_temp;
 
        outobj.batt_soc = this.batt_soc;
 
        outobj.status = this.status;
 
        outobj.key = this.key;
 
        outobj.batt_health = this.batt_health;
 
        outobj.batt_loop_number = this.batt_loop_number;
 
        outobj.powerBoard_status = this.powerBoard_status;
 
        outobj.locomotion_bits = this.locomotion_bits;
 
        outobj.power_boards_bits = this.power_boards_bits;
 
        outobj.other_bits = this.other_bits;
 
        return outobj;
    }
 
}

