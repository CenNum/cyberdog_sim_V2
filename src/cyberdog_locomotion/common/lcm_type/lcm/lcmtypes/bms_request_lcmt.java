/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class bms_request_lcmt implements lcm.lcm.LCMEncodable
{
    public byte charge_enable;
    public byte power_supply;
    public byte buzz;
    public byte locomotion_bits;
    public byte power_boards_bits;
    public byte other_bits;
 
    public bms_request_lcmt()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4de9e751782db678L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.bms_request_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.bms_request_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.charge_enable); 
 
        outs.writeByte(this.power_supply); 
 
        outs.writeByte(this.buzz); 
 
        outs.writeByte(this.locomotion_bits); 
 
        outs.writeByte(this.power_boards_bits); 
 
        outs.writeByte(this.other_bits); 
 
    }
 
    public bms_request_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public bms_request_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.bms_request_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.bms_request_lcmt o = new lcmtypes.bms_request_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.charge_enable = ins.readByte();
 
        this.power_supply = ins.readByte();
 
        this.buzz = ins.readByte();
 
        this.locomotion_bits = ins.readByte();
 
        this.power_boards_bits = ins.readByte();
 
        this.other_bits = ins.readByte();
 
    }
 
    public lcmtypes.bms_request_lcmt copy()
    {
        lcmtypes.bms_request_lcmt outobj = new lcmtypes.bms_request_lcmt();
        outobj.charge_enable = this.charge_enable;
 
        outobj.power_supply = this.power_supply;
 
        outobj.buzz = this.buzz;
 
        outobj.locomotion_bits = this.locomotion_bits;
 
        outobj.power_boards_bits = this.power_boards_bits;
 
        outobj.other_bits = this.other_bits;
 
        return outobj;
    }
 
}

