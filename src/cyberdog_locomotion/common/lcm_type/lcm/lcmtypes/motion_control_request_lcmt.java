/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class motion_control_request_lcmt implements lcm.lcm.LCMEncodable
{
    public byte pattern;
    public double linear[];
    public double angular[];
    public double point[];
    public double quaternion[];
    public double body_height;
    public double gait_height;
    public byte order;
 
    public motion_control_request_lcmt()
    {
        linear = new double[3];
        angular = new double[3];
        point = new double[3];
        quaternion = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4b92198f4cdbe839L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.motion_control_request_lcmt.class))
            return 0L;
 
        classes.add(lcmtypes.motion_control_request_lcmt.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.pattern); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.linear[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.angular[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.point[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.quaternion[a]); 
        }
 
        outs.writeDouble(this.body_height); 
 
        outs.writeDouble(this.gait_height); 
 
        outs.writeByte(this.order); 
 
    }
 
    public motion_control_request_lcmt(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public motion_control_request_lcmt(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.motion_control_request_lcmt _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.motion_control_request_lcmt o = new lcmtypes.motion_control_request_lcmt();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.pattern = ins.readByte();
 
        this.linear = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.linear[a] = ins.readDouble();
        }
 
        this.angular = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.angular[a] = ins.readDouble();
        }
 
        this.point = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.point[a] = ins.readDouble();
        }
 
        this.quaternion = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.quaternion[a] = ins.readDouble();
        }
 
        this.body_height = ins.readDouble();
 
        this.gait_height = ins.readDouble();
 
        this.order = ins.readByte();
 
    }
 
    public lcmtypes.motion_control_request_lcmt copy()
    {
        lcmtypes.motion_control_request_lcmt outobj = new lcmtypes.motion_control_request_lcmt();
        outobj.pattern = this.pattern;
 
        outobj.linear = new double[(int) 3];
        System.arraycopy(this.linear, 0, outobj.linear, 0, 3); 
        outobj.angular = new double[(int) 3];
        System.arraycopy(this.angular, 0, outobj.angular, 0, 3); 
        outobj.point = new double[(int) 3];
        System.arraycopy(this.point, 0, outobj.point, 0, 3); 
        outobj.quaternion = new double[(int) 4];
        System.arraycopy(this.quaternion, 0, outobj.quaternion, 0, 4); 
        outobj.body_height = this.body_height;
 
        outobj.gait_height = this.gait_height;
 
        outobj.order = this.order;
 
        return outobj;
    }
 
}

