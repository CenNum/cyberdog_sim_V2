"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class motion_control_request_lcmt(object):
    __slots__ = ["pattern", "linear", "angular", "point", "quaternion", "body_height", "gait_height", "order"]

    __typenames__ = ["int8_t", "double", "double", "double", "double", "double", "double", "int8_t"]

    __dimensions__ = [None, [3], [3], [3], [4], None, None, None]

    def __init__(self):
        self.pattern = 0
        self.linear = [ 0.0 for dim0 in range(3) ]
        self.angular = [ 0.0 for dim0 in range(3) ]
        self.point = [ 0.0 for dim0 in range(3) ]
        self.quaternion = [ 0.0 for dim0 in range(4) ]
        self.body_height = 0.0
        self.gait_height = 0.0
        self.order = 0

    def encode(self):
        buf = BytesIO()
        buf.write(motion_control_request_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.pattern))
        buf.write(struct.pack('>3d', *self.linear[:3]))
        buf.write(struct.pack('>3d', *self.angular[:3]))
        buf.write(struct.pack('>3d', *self.point[:3]))
        buf.write(struct.pack('>4d', *self.quaternion[:4]))
        buf.write(struct.pack(">ddb", self.body_height, self.gait_height, self.order))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != motion_control_request_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return motion_control_request_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = motion_control_request_lcmt()
        self.pattern = struct.unpack(">b", buf.read(1))[0]
        self.linear = struct.unpack('>3d', buf.read(24))
        self.angular = struct.unpack('>3d', buf.read(24))
        self.point = struct.unpack('>3d', buf.read(24))
        self.quaternion = struct.unpack('>4d', buf.read(32))
        self.body_height, self.gait_height, self.order = struct.unpack(">ddb", buf.read(17))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if motion_control_request_lcmt in parents: return 0
        tmphash = (0x4b92198f4cdbe839) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if motion_control_request_lcmt._packed_fingerprint is None:
            motion_control_request_lcmt._packed_fingerprint = struct.pack(">Q", motion_control_request_lcmt._get_hash_recursive([]))
        return motion_control_request_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", motion_control_request_lcmt._get_packed_fingerprint())[0]

