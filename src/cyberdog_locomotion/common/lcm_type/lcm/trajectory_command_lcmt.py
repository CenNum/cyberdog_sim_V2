"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class trajectory_command_lcmt(object):
    __slots__ = ["motionType", "pose_body_cmd", "pose_foot_cmd", "pose_ctrl_point", "pose_foot_support", "stateEstate_foot_support", "locomotion_vel", "locomotion_omni", "locomotion_gait", "jump_x_acc", "jump_w_acc", "jump_contact", "trans_height", "duration"]

    __typenames__ = ["string", "float", "float", "float", "float", "float", "float", "int32_t", "int32_t", "float", "float", "float", "float", "int32_t"]

    __dimensions__ = [None, [6], [3], [3], [4], [4], [3], None, None, [3], [3], [4], None, None]

    def __init__(self):
        self.motionType = ""
        self.pose_body_cmd = [ 0.0 for dim0 in range(6) ]
        self.pose_foot_cmd = [ 0.0 for dim0 in range(3) ]
        self.pose_ctrl_point = [ 0.0 for dim0 in range(3) ]
        self.pose_foot_support = [ 0.0 for dim0 in range(4) ]
        self.stateEstate_foot_support = [ 0.0 for dim0 in range(4) ]
        self.locomotion_vel = [ 0.0 for dim0 in range(3) ]
        self.locomotion_omni = 0
        self.locomotion_gait = 0
        self.jump_x_acc = [ 0.0 for dim0 in range(3) ]
        self.jump_w_acc = [ 0.0 for dim0 in range(3) ]
        self.jump_contact = [ 0.0 for dim0 in range(4) ]
        self.trans_height = 0.0
        self.duration = 0

    def encode(self):
        buf = BytesIO()
        buf.write(trajectory_command_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __motionType_encoded = self.motionType.encode('utf-8')
        buf.write(struct.pack('>I', len(__motionType_encoded)+1))
        buf.write(__motionType_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>6f', *self.pose_body_cmd[:6]))
        buf.write(struct.pack('>3f', *self.pose_foot_cmd[:3]))
        buf.write(struct.pack('>3f', *self.pose_ctrl_point[:3]))
        buf.write(struct.pack('>4f', *self.pose_foot_support[:4]))
        buf.write(struct.pack('>4f', *self.stateEstate_foot_support[:4]))
        buf.write(struct.pack('>3f', *self.locomotion_vel[:3]))
        buf.write(struct.pack(">ii", self.locomotion_omni, self.locomotion_gait))
        buf.write(struct.pack('>3f', *self.jump_x_acc[:3]))
        buf.write(struct.pack('>3f', *self.jump_w_acc[:3]))
        buf.write(struct.pack('>4f', *self.jump_contact[:4]))
        buf.write(struct.pack(">fi", self.trans_height, self.duration))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != trajectory_command_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return trajectory_command_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = trajectory_command_lcmt()
        __motionType_len = struct.unpack('>I', buf.read(4))[0]
        self.motionType = buf.read(__motionType_len)[:-1].decode('utf-8', 'replace')
        self.pose_body_cmd = struct.unpack('>6f', buf.read(24))
        self.pose_foot_cmd = struct.unpack('>3f', buf.read(12))
        self.pose_ctrl_point = struct.unpack('>3f', buf.read(12))
        self.pose_foot_support = struct.unpack('>4f', buf.read(16))
        self.stateEstate_foot_support = struct.unpack('>4f', buf.read(16))
        self.locomotion_vel = struct.unpack('>3f', buf.read(12))
        self.locomotion_omni, self.locomotion_gait = struct.unpack(">ii", buf.read(8))
        self.jump_x_acc = struct.unpack('>3f', buf.read(12))
        self.jump_w_acc = struct.unpack('>3f', buf.read(12))
        self.jump_contact = struct.unpack('>4f', buf.read(16))
        self.trans_height, self.duration = struct.unpack(">fi", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if trajectory_command_lcmt in parents: return 0
        tmphash = (0xc7f849afda4d848) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if trajectory_command_lcmt._packed_fingerprint is None:
            trajectory_command_lcmt._packed_fingerprint = struct.pack(">Q", trajectory_command_lcmt._get_hash_recursive([]))
        return trajectory_command_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", trajectory_command_lcmt._get_packed_fingerprint())[0]

